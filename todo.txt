

1.5.x  (commit 244+) Better AI ( Campaign state action):

    * AI gets a turn in the campaign map after the player is done.
    * AI builds ships.
    * AI moves ships to other maps.
    * If the player has ships at a map the AI moves to, it starts a battle.

    Todo:
    * If the AI wins the battle they own what was once the player map.
    * Ships can be lost in battles.

Better AI ( Smarter Movement ):

    * AI takes into account the positions of player boats.
    * The AI chooses a target boat and moves it's boats to that target.
    * The AI will move a heavly damaged boat away from action.

Boat Types:

    Todo:
    * more then one Boat type.

Factions :

    Todo:
    * Two factions 'Union', and 'confederacy'
    * player can choose which side to play as.
    * two different campaigns depending on faction choice.

Save and load :

    Todo:
    * a player can now save and load a game state
    * autosave feature in place
    * new egg.js method allows for you to set any campain state


Land Forts:

    Todo:
    * a faction can have one or more land based forts.

Balancing I :

    Todo:
    * union has more ships
    * confederacy has one good ship
    * union often has a better navy.
    * confederacy often has a stronger land defence.

Sprites:

    Todo:
    * spirte sheet loading begins in start state
    * a load machine state is exacuted after start state.
    * load state just informs the player of load progress.
    * title state starts after all sheets are loaded.
    * a boat sprite sheet is loaded that has sprites for boats
    * a landscape sheet is loaded that has sprites for rendering the game map.
    * a title screen sheet.
    * view_canvas.js is updated to use sprites.

Smarter AI:

    Todo:
    * more then one AI script.
    * pre exsisting AI shal be 'easy' script
    * write a 'normal' script
    * write a 'hard' script
    * write a 'Nightmare' script
    * write a 'harmless' script
    * player can choose AI script

Better Moble support:

    Todo:
    * Game is more moble friendly now thanks to viewport meta tag, among other changes.
    * Touch event handlers added
    * Moble friendly interface is used if innerWidth of client <= 640px
    * positioning of interface objects changes depeding on working space.
    * Game Maps cell size resized to moble friendly 10 * 12 cell size allowing for 320px width

Button Class:

    * New Button Class helps manage buttons.
    * The Button class stores the current position and size state of a button.
    * The button state data is used by both the view and control.
    * The values of a button can easly be changed in one place.
    * Button collections for each state.

        ## button.js

        The Problem:

            * You have literal number values that repersent the position of a box that acts as a button
            * You have two copys of literal values for both the view and control.
            * Changing one of the values in your view does not update the coresponding values in the control.
            * The values can not be changed by way of an app loop, or any kind of event, because they are lieterals
            * You have many instances of this, and you would like to better manange the collection of them.

        The Anwser:

            * A class that is use for a single button instance ( Button ).
            * A class that is used for a collection of button instances (ButtonCollection).
            * Your literal values are now properties of a class instance.
            * This class instance is shared between your view and control.
            * A value of a Button Class instance can be changed by User or AI action.
            * All of your buttons are part of a nice neet little collection.
            * It is easy to write methods for your Buttons, and Button collections.
